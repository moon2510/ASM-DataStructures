package ASM;

import java.util.Arrays;
import java.util.Random;

public class  SortCompare{
	int n;
	int A[];
	
	SortCompare(){}
	
	SortCompare(int size){
		n=size;
		A=new int[n];
	}
	void input(){
		Random rd= new Random();
		for (int i=0;i<n;i++) {
			A[i]=rd.nextInt(50);
		}
	}
	void printArray(int[] arr) {

		System.out.println(Arrays.toString(arr));
	}
	
//Simple sort
	
	void Bubble(){
		for (int i = 0; i < n - 1; i++)
            for (int j = 0; j < n - i - 1; j++)
                if (A[j] > A[j + 1]) {
                    int tmp = A[j];
                    A[j] = A[j + 1];
                    A[j + 1] = tmp;
        }
	}
	
//Advance sort
	void MergeSort(int A[], int l, int r) {
		int mid = (l + r) / 2;
	    if (l < r) {
	    	MergeSort(A, l, mid);
	    	MergeSort(A, mid + 1, r);
	    }

	    int i = 0, first = l, last = mid + 1;
	    int[] tmp = new int[r - l + 1];

	    while (first <= mid && last <= r) {
	      tmp[i++] = A[first] < A[last] ? A[first++] : A[last++];
	    }
	    while (first <= mid) {
	      tmp[i++] = A[first++];
	    }
	    while (last <= r) {
	      tmp[i++] = A[last++];
	    }
	    i = 0;
	    while (l <= r) {
	      A[l++] = tmp[i++];
	    }
	}
	
	public static void main(String[] args) {
		SortCompare S=new SortCompare(100000);
		
		double start,finish,time;
		System.out.printf("Length of array: %d",S.n);
		System.out.printf("\n");
		
		//-------------------------BubbleSort----------------------------------
		S.input();
		start=System.currentTimeMillis();
		S.Bubble();
		finish=System.currentTimeMillis();
		time=finish-start;
		System.out.printf("\nTime of Bubble sort: %.1f ms",time);
		
		//-------------------------MergeSort----------------------------------
		S.input();
		start = System.currentTimeMillis();
		S.MergeSort(S.A, 0, S.n - 1);
		finish = System.currentTimeMillis();
		time = finish - start;
		System.out.printf("\nTime of Merge sort takes: %.1f ms\n",time);

	}

}

